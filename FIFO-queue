#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
using namespace std;

enum {
        CMD_LENGTH,
        CMD_PRINT,
        CMD_ADD_EMPTY,
        CMD_ADD,
        CMD_ERROR,
        CMD_DEL_FIRST,
        CMD_DEL_EMPTY,
} ecmd;

struct Elem {
        int key;
        Elem* next;
        Elem(Elem* e, int k) : next(e), key(k) { }
};

char cmd;
int n;
bool isEmptyQueue;
Elem* first, * last, * real_first;


int parseEnum(char cmd) {
        return cmd == 'L' ? CMD_LENGTH :
                cmd == 'P' ? CMD_PRINT :
                cmd == 'A' ? CMD_ADD_EMPTY :
                cmd == 'E' ? CMD_ADD :
                cmd == 'D' ? CMD_DEL_FIRST :
                cmd == 'G' ? CMD_DEL_EMPTY :
                CMD_ERROR;
}

Elem* search(int key)
{
        if (!first) return NULL;
        Elem* tmp = first;
        while (tmp->key != key && tmp != last) tmp = tmp->next;
        if (tmp->key == key) return tmp;
        else return NULL;
}

void printAll() {
        if (!first || isEmptyQueue) printf("-\n");
        else {
                Elem* tmp = first;
                while (tmp != last) {
                        printf("%d->", tmp->key);
                        tmp = tmp->next;
                }
                printf("%d\n", last->key);
        }
}

int totalLength()
{
        if (!real_first) return 0;
        int len(1);
        Elem* tmp = real_first;
        while (tmp->next != real_first)
        { 
                tmp = tmp->next;
                len++;
        }
        return len;
}

void add_empty()
{
        Elem* temp = new Elem(first, NULL);
        if (!first)
        {
                first = temp;
                last = temp;
                real_first = temp;
        }
        last->next = temp;
        last = temp;
}

void add(int n)
{
        Elem* newe = new Elem(real_first, n);
        if (!first)
        {
                first = newe;
                last = newe;
                real_first = newe;
        }
        if (real_first != first)
        {
                real_first = real_first->next;
                newe->next = real_first;
        }
        last->next = newe;
        last = newe;
        isEmptyQueue = false;
}

void del_first()
{
        if (first)
        {
                printf("%d\n", first->key);
                if (first == last)
                {
                        first = NULL;
                        last->next = real_first;
                        isEmptyQueue = true;
                        return;
                }
                Elem* next = first->next;
                first = next;
                last->next = real_first;
        }
        else
        {
                printf("-\n");
        }
}

void del_empty()
{
        if (!first)
        {
                real_first = NULL;
        }
        else
        {
                real_first = first;
                last->next = real_first;

        }
}


int main()
{
        isEmptyQueue = true;
        while (scanf("%c", &cmd) > 0) {
                switch (parseEnum(cmd))
                {
                case CMD_LENGTH:
                        printf("%d\n", totalLength());
                        break;

                case CMD_PRINT:
                        printAll();
                        break;

                case CMD_ADD_EMPTY:
                        add_empty();
                        break;
                case CMD_ADD:
                        scanf("%d", &n);
                        add(n);
                        break;
                case CMD_DEL_FIRST:
                        del_first();
                        break;
                case CMD_DEL_EMPTY:
                        del_empty();
                        break;
                case CMD_ERROR:
                default:
                        break;
                }

        }
        return 0;
}
